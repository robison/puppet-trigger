# Default Trigger settings. Override these with settings in the module
# pointed-to by the TRIGGER_SETTINGS environment variable. This is pretty much
# an exact duplication of how Django does this.

import IPy
import os
import socket

#===============================
# Global Settings
#===============================

# This is where Trigger should look for its files.
PREFIX = '<%= @prefix %>'

# Set to True to enable GPG Authentication
# Set to False to use the old .tackf encryption method.
# Should be False unless instructions/integration is ready for GPG
USE_GPG_AUTH = <%= @use_gpg_auth %>

# This is used for old auth method. It sucks and needs to die.
# TODO (jathan): This is deprecated. Remove all references to this and make GPG
# the default and only method.
USER_HOME = <%= @user_home %>
TACACSRC = <%= @tacacsrc %>
TACACSRC_KEYFILE = <%= @tacacsrc_keyfile %>
TACACSRC_PASSPHRASE = '<%= @tacacs_passphrase %>'

# Default login realm to store user credentials (username, password) for
# general use within the .tacacsrc
DEFAULT_REALM = '<%= @default_realm %>'

# List of plugins allowed to be importd by Commando. Plugins should be listed as
# strings depicting the absolute paths.
#
# e.g. ['trigger.contrib.config_device', 'trigger.contrib.show_clock', 'bacon cool_plugin']
#
# Currently config_device and execute_commands are automatically imported.
BUILTIN_PLUGINS = [
<% @builtin_plugins.each do |value| -%>
    '<%= value %>',
<% end -%>
]

COMMANDO_PLUGINS = BUILTIN_PLUGINS

# Location of firewall policies
FIREWALL_DIR = '<%= @firewall_dir %>'

# Location of tftproot.
TFTPROOT_DIR = '<%= @tftproot_dir %>'
TFTP_HOST = '<%= @tftp_host %>'

# Add internally owned networks here. All network blocks owned/operated and
# considered part of your network should be included.
INTERNAL_NETWORKS = [
<% @internal_networks.each do |value| -%>
    IPy.IP("<%= value %>"),
    <% end -%>
]

# The tuple of supported vendors derived from the values of VENDOR_MAP
SUPPORTED_VENDORS = (
<% @supported_vendors.each do |value| -%>
    '<%= value %>',
    <% end -%>
)


VALID_VENDORS = SUPPORTED_VENDORS # For backwards compatibility

# A mapping of manufacturer attribute values to canonical vendor name used by
# Trigger. These single-word, lowercased canonical names are used throughout
# Trigger.
#
# If your internal definition differs from the UPPERCASED ones specified below
# (which they probably do, customize them here.

VENDOR_MAP = {
    <% @vendor_map.each do |key, value| -%>
    '<%= key %>': '<%= value %>',
    <% end -%>
}

# A dictionary keyed by manufacturer name containing a list of the device types
# for each that is officially supported by Trigger.
SUPPORTED_PLATFORMS = {
    <% @supported_platforms.each do |key, value| -%>
    '<%= key %>': '<%= value %>',
}<% end -%>

# The tuple of support device types
SUPPORTED_TYPES = (
    <% @supported_types.each do |value| -%>
    '<%= value %>',
    <% end -%>
)

# A mapping of of vendor names to the default device type for each in the
# event that a device object is created and the deviceType attribute isn't set
# for some reason.
DEFAULT_TYPES = {
    <% @default_types.each do |key, value| -%>
    '<%= key %>': '<%= value %>',
    <% end -%>
}

# When a vendor is not explicitly defined within `DEFAULT_TYPES`, fallback to
# this type.
FALLBACK_TYPE = '<%= @fallback_type %>'

#===============================
# Twister
#===============================

# Default timeout in seconds for commands executed during a session.  If a
# response is not received within this window, the connection is terminated.
DEFAULT_TIMEOUT = <%= @default_timeout %>

# Default timeout in seconds for initial telnet connections.
TELNET_TIMEOUT  = <%= @telnet_timeout %>

# Whether or not to allow telnet fallback
TELNET_ENABLED = <%= @telnet_enabled %>

# Default ports for SSH
SSH_PORT = <%= @ssh_port %>

# Default port for Telnet
TELNET_PORT = <%= @telnet_port %>

# A mapping of vendors to the types of devices for that vendor for which you
# would like to disable interactive (pty) SSH sessions, such as when using
# bin/gong.
SSH_PTY_DISABLED = {
    <% @ssh_pty_disabled.each do |key, value| -%>
    '<%= key %>': ['<%= value %>'],
    <% end -%>
}

# A mapping of vendors to the types of devices for that vendor for which you
# would like to disable asynchronous (NON-interactive) SSH sessions, such as
# when using twister or Commando to remotely control a device.
SSH_ASYNC_DISABLED = {
    <% @ssh_async_disabled.each do |key, value| -%>
    '<%= key %>': ['<%= value %>'],
    <% end -%>
}

# Vendors that basically just emulate Cisco's IOS and can be treated
# accordingly for the sake of interaction.
IOSLIKE_VENDORS = (
    <% @ioslike_vendors.each do |value| -%>
    '<%= value %>',
    <% end -%>
)

# The file path where .gorc is expected to be found.
GORC_FILE = '<%= @gorc_file %>'

# The only root commands that are allowed to be executed when defined within
# ``~.gorc``. They will be filtered out by `~trigger.gorc.filter_commands()`.
GORC_ALLOWED_COMMANDS = (
    <% @gorc_allowed_commands.each do |value| -%>
    '<%= value %>',
    <% end -%>
)

#===============================
# NetDevices
#===============================

# Change this to False to skip the loading of ACLs globally
# (not recommended)
WITH_ACLS = <%= @with_acls %>

# Path to the explicit module file for autoacl.py so that we can still perform
# 'from trigger.acl.autoacl import autoacl' without modifying sys.path.
AUTOACL_FILE = <%= @autoacl_file %>

# A tuple of data loader classes, specified as strings. Optionally, a tuple can
# be used instead of a string. The first item in the tuple should be the
# Loader's module, subsequent items are passed to the Loader during
# initialization.
NETDEVICES_LOADERS = (
    <% @netdevices_loaders.each do |value| -%>
    '<%= value %>',
    <% end -%>
)

# A path or URL to netdevices device metadata source data, which is used to
# populate trigger.netdevices.NetDevices. For more information on this, see
# NETDEVICES_LOADERS.
NETDEVICES_SOURCE = <%= @netdevices_source %>
# Assign NETDEVICES_SOURCE to NETDEVICES_FILE for backwards compatibility
NETDEVICES_FILE = NETDEVICES_SOURCE

# Whether to treat the RANCID root as a normal instance, or as the root to
# multiple instances. This is only checked when using RANCID as a data source.
RANCID_RECURSE_SUBDIRS = <%= @rancid_recurse_subdirs %>

# Valid owning teams (e.g. device.owningTeam) go here. These are examples and should be
# changed to match your environment.
VALID_OWNERS = (
    <% @valid_owners.each do |value| -%>
    '<%= value %>',
    <% end -%>
)

# Fields and values defined here will dictate which Juniper devices receive a
# ``commit-configuration full`` when populating ``NetDevice.commit_commands`.
# The fields and values must match the objects exactly or it will fallback to
# ``commit-configuration``.
JUNIPER_FULL_COMMIT_FIELDS = {
    <% @juniper_full_commit_fields.each do |key, value| -%>
    '<%= key %>': '<%= value %>',
    <% end -%>
}

#===============================
# Prompt Patterns
#===============================
# Specially-defined, per-vendor prompt patterns. If a vendor isn't defined here,
# try to use IOSLIKE_PROMPT_PAT or fallback to DEFAULT_PROMPT_PAT.
PROMPT_PATTERNS = {
    <% @prompt_patterns.each do |key, value| -%>
    '<%= key %>': '<%= value %>',
    <% end -%>
}

# When a pattern is not explicitly defined for a vendor, this is what we'll try
# next (since most vendors are in fact IOS-like)
IOSLIKE_PROMPT_PAT = <%= @ioslike_prompt_pat %>
IOSLIKE_ENABLE_PAT = <%= @ioslike_enable_pat %>

# Generic prompt to match most vendors. It assumes that you'll be greeted with
# a "#" prompt.
DEFAULT_PROMPT_PAT = <%= @default_prompt_pat %>

#===============================
# Bounce Windows/Change Mgmt
#===============================

# Path of the explicit module file for bounce.py containing custom bounce
# window mappings.
BOUNCE_FILE = <%= @bounce_file %>

# Default bounce timezone. All BounceWindow objects are configured using
# US/Eastern for now.
BOUNCE_DEFAULT_TZ = '<%= @bounce_default_tz %>'

# The default fallback window color for bounce windows. Must be one of
# ('green', 'yellow', or 'red').
#
#     green: Low risk
#    yellow: Medium risk
#       red: High risk
BOUNCE_DEFAULT_COLOR = '<%= @bounce_default_color %>'

#===============================
# Redis Settings
#===============================

# Redis master server. This will be used unless it is unreachable.
REDIS_HOST = '<%= @redis_host %>'

# The Redis port. Default is 6379.
REDIS_PORT = <%= @redis_port %>

# The Redis DB. Default is 0.
REDIS_DB = <%= @redis_db %>

#===============================
# Database Settings
#===============================

# These are self-explanatory, I hope. Use the ``init_task_db`` to initialize
# your database after you've created it! :)
DATABASE_ENGINE = '<%= @database_engine %>'   # Choose 'postgresql', 'mysql', 'sqlite3'
DATABASE_NAME = '<%= @database_name %>'          # Or path to database file if using sqlite3
DATABASE_USER = '<%= @database_user %>'          # Not used with sqlite3
DATABASE_PASSWORD = '<%= @database_password %>'      # Not used with sqlite3
DATABASE_HOST = '<%= @database_host %>'          # Set to '' for localhost. Not used with sqlite3
DATABASE_PORT = '<%= @database_port %>'          # Set to '' for default. Not used with sqlite3.

#===============================
# ACL Management
#===============================
# Whether to allow multi-line comments to be used in Juniper firewall filters.
# Defaults to False.
ALLOW_JUNIPER_MULTILINE_COMMENTS = <%= @allow_juniper_multiline_comments %>

# FILTER names of ACLs that should be skipped or ignored by tools
# NOTE: These should be the names of the filters as they appear on devices. We
# want this to be mutable so it can be modified at runtime.
# TODO (jathan): Move this into Redis and maintain with 'acl' command?
IGNORED_ACLS = [
    <% @ignored_acls.each do |value| -%>
    '<%= value %>',
    <% end -%>
]

# FILE names ACLs that shall not be modified by tools
# NOTE: These should be the names of the files as they exist in FIREWALL_DIR.
# Trigger expects ACLs to be prefixed with 'acl.'.  These are examples and
# should be replaced.
NONMOD_ACLS  = [
    <% @nonmod_acls.each do |value| -%>
    '<%= value %>',
    <% end -%>
]

# Mapping of real IP to external NAT. This is used by load_acl in the event
# that a TFTP or connection from a real IP fails or explicitly when passing the
# --no-vip flag.
# format: {local_ip: external_ip}
VIPS = {
    <% @vips.each do |key, value| -%>
    '<%= key %>': '<%= value %>',
    <% end -%>
}

#===============================
# ACL Loading/Rate-Limiting
#===============================
# All of the following settings are currently only used in ``load_acl``.  If
# and when the load_acl functionality gets moved into the API, this might
# change.

# Any FILTER name (not filename) in this list will be skipped during automatic loads.
AUTOLOAD_BLACKLIST = [
    <% @autoload_blacklist.each do |value| -%>
    '<%= value %>',
    <% end -%>
]

# Assign blacklist to filter for backwards compatibility
AUTOLOAD_FILTER = AUTOLOAD_BLACKLIST

# Modify this if you want to create a list that if over the specified number of
# routers will be treated as bulk loads.
# TODO (jathan): Provide examples so that this has more context/meaning. The
# current implementation is kind of broken and doesn't scale for data centers
# with a large of number of devices.
#
# Format:
# { 'filter_name': threshold_count }
AUTOLOAD_FILTER_THRESH = {
    <% @autoload_filter_thresh.each do |key, value| -%>
    '<%= key %>': '<%= value %>',
    <% end -%>
}

# Any ACL applied on a number of devices >= to this number will be treated as
# bulk loads.
AUTOLOAD_BULK_THRESH = <%= @autoload_bulk_thresh %>

# Add an acl:max_hits here if you want to override BULK_MAX_HITS_DEFAULT
# Keep in mind this number is PER EXECUTION of load_acl --auto (typically once
# per hour or 3 per bounce window).
#
# 1 per load_acl execution; ~3 per day, per bounce window
# 2 per load_acl execution; ~6 per day, per bounce window
# etc.
#
# Format:
# { 'filter_name': max_hits }
BULK_MAX_HITS = {
    <% @bulk_max_hits.each do |key, value| -%>
    '<%= key %>': <%= value %>,
    <% end -%>
}

# If an ACL is bulk but not in BULK_MAX_HITS, use this number as max_hits
BULK_MAX_HITS_DEFAULT = <%= @bulk_max_hits_default %>


#===============================
# Stage ACL changes
#===============================
# This variable should be a function that returns the contents of the ACL
# files that are being pushed and the tftp location for all of them
#
# input
# list of file names, optional log file and boolean for sanitizing
#
# return
# ([<list of string where each string is the entire contents of an acl file to push>],
#   [<list of the path to files on the tftp server to push>])
#
def _stage_acls(acls, log=None, sanitize_acl=False):
    """stage the new ACL files for load_acl"""

    import os
    from trigger.acl import parse as acl_parse

    acl_contents = []
    tftp_paths = []

    fails = []

    for acl in acls:
        nonce = os.urandom(8).encode('hex')
        source = FIREWALL_DIR + '/%s' % acl
        dest = TFTPROOT_DIR + '/%s.%s' % (acl, nonce)

        try:
            os.stat(dest)
        except OSError:
            try:
                shutil.copyfile(source, dest)
            except:
                fails.append("Unable to stage TFTP File %s" % str(acls))
                continue
            else:
                os.chmod(dest, 0644)

        file_contents = file(FIREWALL_DIR + '/' + acl).read()
        acl_contents.append(file_contents)

        tftp_paths.append("%s.%s" % (acl, nonce))

        #strip comments if brocade
        if (sanitize_acl):
            msg = 'Sanitizing ACL {0} as {1}'.format(source, dest)
            log.msg(msg)
            with open(source, 'r') as src_acl:
                acl = acl_parse(src_acl)
            acl.strip_comments()
            output = '\n'.join(acl.output(replace=True)) + '\n'
            with open(dest, 'w') as dst_acl:
                dst_acl.write(output)

    return acl_contents, tftp_paths, fails

STAGE_ACLS = _stage_acls


#===============================
# Get the TFTP source
#===============================
def _get_tftp_source(dev=None, no_vip=True): #False): #True):
    """
    Determine the right TFTP source-address to use (public vs. private)
    based on ``settings.VIPS``, and return that address.

    :param dev:
        A `~trigger.netdevices.NetDevice` object
    """
    import socket
    host = socket.gethostbyname(socket.getfqdn())
    if no_vip:
        return host
    elif host not in VIPS:
        return host
    ## hack to make broken routers work (This shouldn't be necessary.)
    for broken in 'ols', 'rib', 'foldr':
        if dev.nodeName.startswith(broken):
            return host
    return VIPS[host]

GET_TFTP_SOURCE = _get_tftp_source

#===============================
# OnCall Engineer Display
#===============================
# This variable should be a function that returns data for your on-call engineer, or
# failing that None.  The function should return a dictionary that looks like
# this:
#
# {'username': 'joegineer',
#  'name': 'Joe Engineer',
#  'email': 'joe.engineer@example.notreal'}
#
# If you don't want to return this information, have it return None.
GET_CURRENT_ONCALL = lambda x=None: x

#===============================
# CM Ticket Creation
#===============================
# This should be a function that creates a CM ticket and returns the ticket
# number, or None.
# TODO (jathan): Improve this interface so that it is more intuitive.
def _create_cm_ticket_stub(**args):
    return None

# If you don't want to use this feature, just have the function return None.
CREATE_CM_TICKET = _create_cm_ticket_stub

#===============================
# Notifications
#===============================
# Email sender for integrated toosl. Usually a good idea to make this a
# no-reply address.
EMAIL_SENDER = '<%= @email_sender %>'

# Who to email when things go well (e.g. load_acl --auto)
SUCCESS_EMAILS = [
    <% @success_emails.each do |value| -%>
    '<%= value %>',
    <% end -%>
]

# Who to email when things go not well (e.g. load_acl --auto)
FAILURE_EMAILS = [
    <% @failure_emails.each do |value| -%>
    '<%= value %>',
    <% end -%>
]

# The default sender for integrated notifications. This defaults to the fqdn
# for the localhost.
NOTIFICATION_SENDER = socket.gethostname()

# Destinations (hostnames, addresses) to notify when things go well.
SUCCESS_RECIPIENTS = [
    <% @success_recipients.each do |value| -%>
    '<%= value %>',
    <% end -%>
]

# Destinations (hostnames, addresses) to notify when things go not well.
FAILURE_RECIPIENTS = [
    <% @failure_recipients.each do |value| -%>
    '<%= value %>',
    <% end -%>
]

# This is a list of fully-qualified paths. Each path should end with a callable
# that handles a notification event and returns ``True`` in the event of a
# successful notification, or ``None``.
NOTIFICATION_HANDLERS = [
    <% @notification_handlers.each do |value| -%>
    '<%= value %>',
    <% end -%>
]
